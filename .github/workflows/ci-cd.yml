name: CI/CD Pipeline for Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main  # Trigger on push to the 'main' branch.
  pull_request:
    branches:
      - main  # Trigger on pull requests to the 'main' branch.

jobs:
  # Terraform Job
  terraform:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Output EC2 IP to file 
        run: |
          terraform output -raw vm_ip > instance_ip.txt

      - name: Upload instance IP file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: instance-ip-file
          path: instance_ip.txt

  # Ansible Job
  ansible:
    runs-on: ubuntu-latest

    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible
          sudo apt-get install python3 python3-pip -y

      - name: Download instance IP file
        uses: actions/download-artifact@v3
        with:
          name: instance-ip-file

      - name: Read EC2 Instance IP
        run: |
          INSTANCE_IP=$(cat instance_ip.txt)
          echo "EC2 Instance IP: $INSTANCE_IP"

      - name: Set up SSH private key
        run: |
          echo "${{ secrets.SSH_KEY }}" > my-key-pair.pem
          chmod 600 my-key-pair.pem

      - name: Add public key to EC2 authorized_keys
        run: |
          INSTANCE_IP=$(cat instance_ip.txt)
          ssh -o StrictHostKeyChecking=no -i my-key-pair.pem ubuntu@$INSTANCE_IP "mkdir -p ~/.ssh && echo '${{ secrets.SSH_PUBLIC_KEY }}' >> ~/.ssh/authorized_keys"

      - name: Set up Ansible inventory file
        run: |
          echo "[aws_servers]" > inventory.ini
          echo "$(cat instance_ip.txt) ansible_user=ubuntu ansible_ssh_private_key_file=my-key-pair.pem" >> inventory.ini

      - name: Debug Inventory File (optional)
        run: cat inventory.ini

      - name: Create ansible.cfg file
        run: |
          echo "[defaults]" > ansible.cfg
          echo "inventory = inventory.ini" >> ansible.cfg
          echo "host_key_checking = False" >> ansible.cfg
          echo "interpreter_python = /usr/bin/python3" >> ansible.cfg

      - name: Debug Ansible Config File (optional)
        run: cat ansible.cfg

      - name: Run Ansible All for Debugging
        run: |
          ansible all -i inventory.ini -m ping -vvvv

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini deploy.yml
